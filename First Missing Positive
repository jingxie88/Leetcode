class Solution:
    def firstMissingPositive(self, A):
        i = 0
        while i < len(A):
            if A[i] > 0 and A[i] - 1 < len(A) and A[A[i] - 1] != A[i]:
                A[A[i] - 1], A[i] = A[i], A[A[i] - 1]
            else:
                i += 1
        for i in range(len(A)):
            if A[i] != i + 1:
                return i + 1
        return len(A) + 1
        
# My way! More efficient way! Avoid unneccesary swaps! Allow -1, 5, 4, 3, 1

class Solution:
    def firstMissingPositive(self, A):
        i = 0
        for i in range(len(A)): 
        j = i
        while A[A[j] - 1] != A[j]:
          t = A[A[j] - 1] - 1
          A[A[j] - 1] = A[j]
          j = t
        for i in range(len(A)):
            if A[i] != i + 1:
                return i + 1
        return len(A) + 1
