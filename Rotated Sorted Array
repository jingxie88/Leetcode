# If M defined as Left Mid, then always compare the values between M and Right. 
# To avoid case like [2,1] where L coincides with M.

def findMin(self, num):
if not num: return -1
min = num[0]
l = 0; r = len(num) - 1
while l <= r:
m = (l + r)//2
if num[m] < num[r]:
min = min if min < num[m] else num[m]
r = m - 1
else:
min = min if min < num[l] else num[l]
l = m + 1
return min



## Search Target
# def search(self, A, target):
# if not A: return -1
#
# l = 0; r = len(A) - 1
#
# while l <= r:
# m = (l + r)//2
# if A[m] == target:
# return m
# elif A[m] < A[r]:
# if A[m] < target and target <= A[r]:
# l = m + 1
# else:
# r = m - 1
# else:
# if A[l] <= target and target < A[m]:
# r = m - 1
# else:
# l = m + 1
# return -1
